'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

''' 
Solution: 4613732
I solve this problem by creating a function and the variable x is the max value.
First, I want to find all the Fibonacci sequence values below the max value.
The initial list a=[1,2] and because the Fibonacci sequence is generated by adding the previous two terms,
so the next value of the sequence is always the sum of the last two values of this list, so b=a[-1]+a[-2].
By appending b in list a in a while loop, I got the Fibonacci sequence values under the max value.
Second, find the sum of the even numbers in complete list with a for loop.

'''
def find_sum(x):
    a=[1,2]
    sum_of_even=0
    while True:
        b=a[-1]+a[-2]
        if b<x:
            a.append(b)
        else:
            break
    for values in a:
        if values%2==0:
            sum_of_even+=values
    print(sum_of_even)

find_sum(4000000)
